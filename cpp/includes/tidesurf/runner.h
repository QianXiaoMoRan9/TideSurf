#pragma once

#include <cstdint>
#include <cstring>
#include <iostream>
#include <unordered_map>

#include <pthread.h>

#include "rapidjson/document.h"

#include "tidesurf/tidesurf_macros.h"
#include "tidesurf/globals.h"
#include "tidesurf/record_table.h"
#include "tidesurf/file_io.h"
#include "tidesurf/stock.h"

namespace tidesurf
{
    class TideSurfConfig
    {
    public:
        
        std::string config_json_file_path_; // The config file path passed from execution arg
        std::string history_folder_path_; // The root folder that stores the stock data and stock list
        std::string app_data_path_; // Data generated by the app
        explicit TideSurfConfig() = default;
        explicit TideSurfConfig(const char *config_json_file);
    };

    /**
     * @brief The arch driver class for the program
     * 
     * Responsible for initializing:
     * The data receiver
     * Load the previous history data
     * Load configurations
     * Start the server for web client
     * 
     */
    class Runner
    {
    public:

        explicit Runner(const char *config_json_path);

        void InitConfiguration(const char *config_json_path);

        
        void InitDatReceiver() {
        }

        /**
         * @brief Load the most recent stock list from app_data_path and construct stock map
         * 
         * @param config 
         * @return std::unordered_map<std::string, Stock> 
         */
        void InitStockMap(TideSurfConfig config);

        void InitHistoryData();

        void InitWebServer();

    private:
        TideSurfConfig config_;
        std::unordered_map<std::string, Stock> stock_map_;
    };

} // namespace tidesurf
